package appinterface

import (
	"path/filepath"
	"testing"

	"github.com/observatorium/statectl/pkg/project"
	"github.com/observatorium/statectl/pkg/testutil"
)

func TestDecode(t *testing.T) {
	s := NewSaaSCodec(Config{
		SaaSFile: filepath.Join("testdata", "saas.yaml"),

		ClustersByRef: map[string]project.Cluster{
			"/services/telemeter/namespaces/production.yml": {
				Name:        "prod1",
				Environment: "production",
			},
			"/services/telemeter/namespaces/stage.yml": {
				Name:        "stage1",
				Environment: "staging",
			},
			"/services/telemeter/namespaces/not-used.yml": {
				Name:        "notused1",
				Environment: "staging",
			},
		},
	})

	ss, err := s.Decode(".")
	testutil.Ok(t, err)
	testutil.Equals(t, []project.ServiceState{
		{
			Service:           "observatorium",
			Cluster:           project.Cluster{Name: "stage1", Environment: "staging"},
			ConfigurationRef:  "75c09bf3ce29a9862d762972d7f8dda85e17a8c4",
			ConfigurationURL:  "example.com/observatorium/configuration",
			ConfigurationPath: "/manifests/production/observatorium-template.yaml",
			EnvParameters: map[string]string{
				"AUTHORIZE_URL":                            "${OCM_BASE_URL}/api/accounts_mgmt/v1/cluster_registrations",
				"IMAGE":                                    "quay.io/app-sre/telemeter",
				"IMAGE_CANARY":                             "quay.io/app-sre/telemeter",
				"IMAGE_CANARY_TAG":                         "b4f226c",
				"IMAGE_TAG":                                "8e65e1c",
				"JAEGER_AGENT_IMAGE":                       "quay.io/app-sre/jaegertracing-jaeger-agent",
				"JAEGER_AGENT_IMAGE_TAG":                   "1.16.0",
				"MEMCACHED_EXPORTER_IMAGE":                 "quay.io/prometheus/memcached-exporter",
				"MEMCACHED_EXPORTER_IMAGE_TAG":             "v0.6.0",
				"MEMCACHED_IMAGE":                          "registry.example.com/rhel8/memcached",
				"MEMCACHED_IMAGE_TAG":                      "1.5",
				"NAMESPACE":                                "stage",
				"OBSERVATORIUM_API_IMAGE":                  "quay.io/observatorium/observatorium",
				"OBSERVATORIUM_API_IMAGE_TAG":              "master-2020-09-22-v0.1.1-150-gb315f72",
				"PROMETHEUS_AMS_REMOTE_WRITE_PROXY_TARGET": "observatorium-thanos-receive",
				"REPLICAS":                                 "3",
				"REPLICAS_CANARY":                          "0",
				"STORAGE_CLASS":                            "gp2",
				"TELEMETER_FORWARD_URL":                    "http://observatorium-thanos-receive.stage.svc.cluster.local:19291/api/v1/receive",
				"TELEMETER_SERVER_CPU_LIMIT":               "1",
				"TELEMETER_SERVER_CPU_REQUEST":             "100m",
				"TELEMETER_SERVER_MEMORY_LIMIT":            "1Gi",
				"TELEMETER_SERVER_MEMORY_REQUEST":          "100Mi",
				"TELEMETER_SERVER_TOKEN_EXPIRE_SECONDS":    "43200",
				"THANOS_COMPACTOR_PVC_REQUEST":             "50Gi",
				"THANOS_COMPACTOR_REPLICAS":                "1",
				"THANOS_CONFIG_SECRET":                     "thanos-objectstorage",
				"THANOS_IMAGE":                             "quay.io/thanos/thanos",
				"THANOS_IMAGE_TAG":                         "master-2020-09-24-49dad93e",
				"THANOS_QUERIER_CPU_LIMIT":                 "250m",
				"THANOS_QUERIER_CPU_REQUEST":               "50m",
				"THANOS_QUERIER_MEMORY_LIMIT":              "512Mi",
				"THANOS_QUERIER_MEMORY_REQUEST":            "100Mi",
				"THANOS_QUERIER_REPLICAS":                  "2",
				"THANOS_QUERY_FRONTEND_CPU_LIMIT":          "1",
				"THANOS_QUERY_FRONTEND_CPU_REQUEST":        "100m",
				"THANOS_QUERY_FRONTEND_MEMORY_LIMIT":       "1Gi",
				"THANOS_QUERY_FRONTEND_MEMORY_REQUEST":     "256Mi",
				"THANOS_QUERY_FRONTEND_REPLICAS":           "3",
				"THANOS_RECEIVE_CONTROLLER_IMAGE_TAG":      "master-2020-02-06-b66e0c8",
				"THANOS_RECEIVE_CPU_LIMIT":                 "700m",
				"THANOS_RECEIVE_CPU_REQUEST":               "700m",
				"THANOS_RECEIVE_DEBUG_ENV":                 "1",
				"THANOS_RECEIVE_LOG_LEVEL":                 "debug",
				"THANOS_RECEIVE_MEMORY_LIMIT":              "5Gi",
				"THANOS_RECEIVE_MEMORY_REQUEST":            "5Gi",
				"THANOS_RECEIVE_REPLICAS":                  "3",
				"THANOS_S3_SECRET":                         "telemeter-thanos-stage-s3",
				"THANOS_STORE_CACHE_MEMORY_LIMIT_MB":       "2048",
				"THANOS_STORE_CPU_LIMIT":                   "250m",
				"THANOS_STORE_CPU_REQUEST":                 "50m",
				"THANOS_STORE_LOG_LEVEL":                   "debug",
				"THANOS_STORE_MEMORY_LIMIT":                "2Gi",
				"THANOS_STORE_MEMORY_REQUEST":              "512Mi",
				"THANOS_STORE_REPLICAS":                    "1",
			},
		},
		{
			Service:           "observatorium",
			Cluster:           project.Cluster{Name: "prod1", Environment: "production"},
			ConfigurationRef:  "75c09bf3ce29a9862d762972d7f8dda85e17a8c4",
			ConfigurationURL:  "example.com/observatorium/configuration",
			ConfigurationPath: "/manifests/production/observatorium-template.yaml",
			EnvParameters: map[string]string{
				"AUTHORIZE_URL":                            "${OCM_BASE_URL}/api/accounts_mgmt/v1/cluster_registrations",
				"IMAGE":                                    "quay.io/app-sre/telemeter",
				"IMAGE_CANARY":                             "quay.io/app-sre/telemeter",
				"IMAGE_CANARY_TAG":                         "8e65e1c",
				"IMAGE_TAG":                                "8e65e1c",
				"JAEGER_AGENT_IMAGE":                       "quay.io/app-sre/jaegertracing-jaeger-agent",
				"JAEGER_AGENT_IMAGE_TAG":                   "1.14.0",
				"MEMCACHED_EXPORTER_IMAGE":                 "quay.io/prometheus/memcached-exporter",
				"MEMCACHED_EXPORTER_IMAGE_TAG":             "v0.6.0",
				"MEMCACHED_IMAGE":                          "registry.example.com/rhel8/memcached",
				"MEMCACHED_IMAGE_TAG":                      "1.5",
				"NAMESPACE":                                "production",
				"OBSERVATORIUM_API_IMAGE":                  "quay.io/observatorium/observatorium",
				"OBSERVATORIUM_API_IMAGE_TAG":              "master-2020-09-22-v0.1.1-150-gb315f72",
				"OBSERVATORIUM_API_REPLICAS":               "3",
				"PROMETHEUS_AMS_REMOTE_WRITE_PROXY_TARGET": "observatorium-thanos-receive",
				"REPLICAS":                                 "10",
				"REPLICAS_CANARY":                          "0",
				"STORAGE_CLASS":                            "gp2",
				"TELEMETER_FORWARD_URL":                    "http://observatorium-thanos-receive.production.svc.cluster.local:19291/api/v1/receive",
				"TELEMETER_SERVER_CPU_LIMIT":               "1500m",
				"TELEMETER_SERVER_CPU_REQUEST":             "100m",
				"TELEMETER_SERVER_MEMORY_LIMIT":            "1Gi",
				"TELEMETER_SERVER_MEMORY_REQUEST":          "100Mi",
				"THANOS_COMPACTOR_PVC_REQUEST":             "150Gi",
				"THANOS_COMPACTOR_REPLICAS":                "1",
				"THANOS_CONFIG_SECRET":                     "thanos-objectstorage",
				"THANOS_IMAGE":                             "quay.io/thanos/thanos",
				"THANOS_IMAGE_TAG":                         "master-2020-09-24-49dad93e",
				"THANOS_QUERIER_CACHE_MEMORY_LIMIT":        "2Gi",
				"THANOS_QUERIER_CACHE_MEMORY_REQUEST":      "2Gi",
				"THANOS_QUERIER_CPU_LIMIT":                 "3",
				"THANOS_QUERIER_CPU_REQUEST":               "1",
				"THANOS_QUERIER_MEMORY_LIMIT":              "15Gi",
				"THANOS_QUERIER_MEMORY_REQUEST":            "10Gi",
				"THANOS_QUERIER_REPLICAS":                  "6",
				"THANOS_QUERY_FRONTEND_CPU_LIMIT":          "1",
				"THANOS_QUERY_FRONTEND_CPU_REQUEST":        "100m",
				"THANOS_QUERY_FRONTEND_MEMORY_LIMIT":       "1Gi",
				"THANOS_QUERY_FRONTEND_MEMORY_REQUEST":     "256Mi",
				"THANOS_QUERY_FRONTEND_REPLICAS":           "3",
				"THANOS_RECEIVE_CONTROLLER_IMAGE_TAG":      "master-2020-02-06-b66e0c8",
				"THANOS_RECEIVE_CPU_LIMIT":                 "2",
				"THANOS_RECEIVE_CPU_REQUEST":               "2",
				"THANOS_RECEIVE_MEMORY_LIMIT":              "28Gi",
				"THANOS_RECEIVE_MEMORY_REQUEST":            "28Gi",
				"THANOS_RECEIVE_REPLICAS":                  "6",
				"THANOS_S3_SECRET":                         "telemeter-thanos-production-s3",
				"THANOS_STORE_BUCKET_CACHE_REPLICAS":       "10",
				"THANOS_STORE_CPU_LIMIT":                   "1",
				"THANOS_STORE_CPU_REQUEST":                 "1",
				"THANOS_STORE_MEMORY_LIMIT":                "20Gi",
				"THANOS_STORE_MEMORY_REQUEST":              "20Gi",
				"THANOS_STORE_REPLICAS":                    "1",
			},
		},
		{Service: "observatorium-jaeger",
			Cluster:           project.Cluster{Name: "stage1", Environment: "staging"},
			ConfigurationRef:  "master",
			ConfigurationURL:  "example.com/observatorium/configuration",
			ConfigurationPath: "/manifests/production/jaeger-template.yaml",
			EnvParameters: map[string]string{
				"IMAGE":                 "yolo",
				"IMAGE_TAG":             "badger-v2-ubi-minimal",
				"JAEGER_CPU_LIMITS":     "500m",
				"JAEGER_CPU_REQUEST":    "100m",
				"JAEGER_MEMORY_LIMITS":  "4Gi",
				"JAEGER_MEMORY_REQUEST": "1Gi",
				"NAMESPACE":             "stage",
				"REPLICAS":              "1",
			},
		},
		{Service: "observatorium-jaeger",
			Cluster:           project.Cluster{Name: "prod1", Environment: "production"},
			ConfigurationRef:  "6a09089f2b5998db06ed1ee09438a7c3249996a4",
			ConfigurationURL:  "example.com/observatorium/configuration",
			ConfigurationPath: "/manifests/production/jaeger-template.yaml",
			EnvParameters: map[string]string{
				"IMAGE":                 "quay.io/app-sre/jaegertracing-all-in-one",
				"IMAGE_TAG":             "1.16.0",
				"JAEGER_CPU_LIMITS":     "2",
				"JAEGER_CPU_REQUEST":    "1",
				"JAEGER_MEMORY_LIMITS":  "8Gi",
				"JAEGER_MEMORY_REQUEST": "4Gi",
				"NAMESPACE":             "production",
				"REPLICAS":              "1",
			},
		},
		{Service: "conprof",
			Cluster:           project.Cluster{Name: "stage1", Environment: "staging"},
			ConfigurationRef:  "master",
			ConfigurationURL:  "example.com/observatorium/configuration",
			ConfigurationPath: "/manifests/production/conprof-template.yaml",
			EnvParameters: map[string]string{
				"CONPROF_CPU_LIMITS":     "500m",
				"CONPROF_CPU_REQUEST":    "100m",
				"CONPROF_MEMORY_LIMITS":  "4Gi",
				"CONPROF_MEMORY_REQUEST": "1Gi",
				"CONPROF_REPLICAS":       "1",
				"IMAGE":                  "quay.io/conprof/conprof",
				"IMAGE_TAG":              "master-2020-09-23-08090ad",
				"NAMESPACE":              "stage",
			},
		},
		{
			Service:           "conprof",
			Cluster:           project.Cluster{Name: "prod1", Environment: "production"},
			ConfigurationRef:  "d08ee5fb2826a448874ebb1ef3b746ae0486e87a",
			ConfigurationURL:  "example.com/observatorium/configuration",
			ConfigurationPath: "/manifests/production/conprof-template.yaml",
			EnvParameters: map[string]string{
				"CONPROF_CPU_LIMITS":     "2",
				"CONPROF_CPU_REQUEST":    "1",
				"CONPROF_MEMORY_LIMITS":  "16Gi",
				"CONPROF_MEMORY_REQUEST": "8Gi",
				"CONPROF_REPLICAS":       "1",
				"IMAGE":                  "quay.io/conprof/conprof",
				"IMAGE_TAG":              "master-2020-09-23-08090ad",
				"NAMESPACE":              "production",
			},
		},
	}, ss)
}

func TestDecode_NoSuchCluster(t *testing.T) {
	s := NewSaaSCodec(Config{
		SaaSFile: filepath.Join("testdata", "saas.yaml"),

		ClustersByRef: map[string]project.Cluster{
			"/services/telemeter/namespaces/production.yml": {
				Name:        "prod1",
				Environment: "production",
			},
			"/services/telemeter/namespaces/unknown.yml": {
				Name:        "stage1",
				Environment: "staging",
			},
		},
	})
	_, err := s.Decode(".")
	testutil.NotOk(t, err)
}
